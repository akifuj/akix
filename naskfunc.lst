     1 00000000                                 ; naskfunc
     2 00000000                                 
     3 00000000                                 [FORMAT "WCOFF"]
     4 00000000                                 [INSTRSET "i486p"]
     5 00000000                                 [BITS 32]
     6 00000000                                 [FILE "naskfunc.nas"]
     7 00000000                                 
     8 00000000                                 	GLOBAL _io_hlt, _io_cli, _io_sti, _io_stihlt
     9 00000000                                 	GLOBAL _io_in8, _io_in16, _io_in32
    10 00000000                                 	GLOBAL _io_out8, _io_out16, _io_out32
    11 00000000                                 	GLOBAL _io_load_eflags, _io_store_eflags
    12 00000000                                 	GLOBAL _load_gdtr, _load_idtr
    13 00000000                                 	GLOBAL _load_cr0, _store_cr0
    14 00000000                                 	GLOBAL _load_tr
    15 00000000                                 	GLOBAL _asm_inthandler20, _asm_inthandler21, _asm_inthandler27, _asm_inthandler2c
    16 00000000                                 	GLOBAL _memtest_sub
    17 00000000                                 	GLOBAL _farjmp
    18 00000000                                 	EXTERN _inthandler20, _inthandler21, _inthandler27, _inthandler2c
    19 00000000                                 
    20                                          [SECTION .text]
    21 00000000                                 
    22 00000000                                 _io_hlt:	; void io_hlt(void);
    23 00000000 F4                              	hlt
    24 00000001 C3                              	ret
    25 00000002                                 
    26 00000002                                 _io_cli:	; void io_cli(void);
    27 00000002 FA                              	cli
    28 00000003 C3                              	ret
    29 00000004                                 
    30 00000004                                 _io_sti:	; void io_sti(void);
    31 00000004 FB                              	sti
    32 00000005 C3                              	ret
    33 00000006                                 
    34 00000006                                 _io_stihlt:	; void io_stihlt(void);
    35 00000006 FB                              	sti
    36 00000007 F4                              	hlt
    37 00000008 C3                              	ret
    38 00000009                                 
    39 00000009                                 _io_in8:	; int io_in8(int port);
    40 00000009 8B 54 24 04                     	mov	edx,[esp+4]
    41 0000000D B8 00000000                     	mov	eax,0
    42 00000012 EC                              	in	al,dx
    43 00000013 C3                              	ret
    44 00000014                                 
    45 00000014                                 _io_in16:	; int io_in16(int port);
    46 00000014 8B 54 24 04                     	mov	edx,[esp+4]
    47 00000018 B8 00000000                     	mov	eax,0
    48 0000001D 66 ED                           	in	ax,dx
    49 0000001F C3                              	ret
    50 00000020                                 
    51 00000020                                 _io_in32:	; int io_in32(int port);
    52 00000020 8B 54 24 04                     	mov	edx,[esp+4]
    53 00000024 ED                              	in	eax,dx
    54 00000025 C3                              	ret
    55 00000026                                 
    56 00000026                                 _io_out8:	; void io_out8(int port, int data);
    57 00000026 8B 54 24 04                     	mov	edx,[esp+4]
    58 0000002A 8A 44 24 08                     	mov	al,[esp+8]
    59 0000002E EE                              	out	dx,al
    60 0000002F C3                              	ret
    61 00000030                                 
    62 00000030                                 _io_out16:	; void io_out16(int port, int data);
    63 00000030 8B 54 24 04                     	mov	edx,[esp+4]
    64 00000034 8B 44 24 08                     	mov	eax,[esp+8]
    65 00000038 66 EF                           	out	dx,ax
    66 0000003A C3                              	ret
    67 0000003B                                 
    68 0000003B                                 _io_out32:	; void io_out32(int port, int data);
    69 0000003B 8B 54 24 04                     	mov	edx,[esp+4]
    70 0000003F 8B 44 24 08                     	mov	eax,[esp+8]
    71 00000043 EF                              	out	dx,eax
    72 00000044 C3                              	ret
    73 00000045                                 
    74 00000045                                 _io_load_eflags:	; int io_load_eflags(void);
    75 00000045 9C                              	pushfd
    76 00000046 58                              	pop	eax
    77 00000047 C3                              	ret
    78 00000048                                 
    79 00000048                                 _io_store_eflags:	; void io_store_eflags(int eflags);
    80 00000048                                 	mov
      >> [ERROR #002] parameter error.
    81 00000048 50                              	push	eax
    82 00000049 9D                              	popfd
    83 0000004A C3                              	ret
    84 0000004B                                 
    85 0000004B                                 _load_tr:		; void load_tr(int tr);
    86 0000004B 0F 00 5C 24 04                  	ltr	[esp+4]
    87 00000050 C3                              	ret
    88 00000051                                 
    89 00000051                                 _load_gdtr:	; void load_gdtr(int limit, int addr);
    90 00000051 66 8B 44 24 04                  	mov	ax,[esp+4]
    91 00000056 66 89 44 24 06                  	mov	[esp+6],ax
    92 0000005B 0F 01 54 24 06                  	lgdt	[esp+6]
    93 00000060 C3                              	ret
    94 00000061                                 
    95 00000061                                 _load_idtr:	; void load_idtr(int limit, int addr);
    96 00000061 66 8B 44 24 04                  	mov	ax,[esp+4]
    97 00000066 66 89 44 24 06                  	mov	[esp+6],ax
    98 0000006B 0F 01 5C 24 06                  	lidt	[esp+6]
    99 00000070 C3                              	ret
   100 00000071                                 
   101 00000071                                 _load_cr0:		; int load_cr0(void);
   102 00000071 0F 20 C0                        	mov	eax,cr0
   103 00000074 C3                              	ret
   104 00000075                                 
   105 00000075                                 _store_cr0:		; void store_cr0(int cr0);
   106 00000075 8B 44 24 04                     	mov 	eax,[esp+4]
   107 00000079 0F 22 C0                        	mov	cr0,eax
   108 0000007C C3                              	ret
   109 0000007D                                 
   110 0000007D                                 _asm_inthandler20:
   111 0000007D 06                              	push 	es
   112 0000007E 1E                              	push 	ds
   113 0000007F 60                              	pushad
   114 00000080 89 E0                           	mov		eax,esp
   115 00000082 50                              	push	eax
   116 00000083 66 8C D0                        	mov		ax,ss
   117 00000086 8E D8                           	mov		ds,ax
   118 00000088 8E C0                           	mov		es,ax
   119 0000008A E8 [00000000]                   	call	_inthandler20
   120 0000008F 58                              	pop		eax
   121 00000090 61                              	popad
   122 00000091 1F                              	pop		ds
   123 00000092 07                              	pop		es
   124 00000093 CF                              	iretd
   125 00000094                                 
   126 00000094                                 
   127 00000094                                 _asm_inthandler21:
   128 00000094 06                              	push 	es
   129 00000095 1E                              	push 	ds
   130 00000096 60                              	pushad
   131 00000097 89 E0                           	mov		eax,esp
   132 00000099 50                              	push	eax
   133 0000009A 66 8C D0                        	mov		ax,ss
   134 0000009D 8E D8                           	mov		ds,ax
   135 0000009F 8E C0                           	mov		es,ax
   136 000000A1 E8 [00000000]                   	call	_inthandler21
   137 000000A6 58                              	pop		eax
   138 000000A7 61                              	popad
   139 000000A8 1F                              	pop		ds
   140 000000A9 07                              	pop		es
   141 000000AA CF                              	iretd
   142 000000AB                                 
   143 000000AB                                 _asm_inthandler27:
   144 000000AB 06                              	push 	es
   145 000000AC 1E                              	push 	ds
   146 000000AD 60                              	pushad
   147 000000AE 89 E0                           	mov		eax,esp
   148 000000B0 50                              	push	eax
   149 000000B1 66 8C D0                        	mov		ax,ss
   150 000000B4 8E D8                           	mov		ds,ax
   151 000000B6 8E C0                           	mov		es,ax
   152 000000B8 E8 [00000000]                   	call	_inthandler27
   153 000000BD 58                              	pop		eax
   154 000000BE 61                              	popad
   155 000000BF 1F                              	pop		ds
   156 000000C0 07                              	pop		es
   157 000000C1 CF                              	iretd
   158 000000C2                                 	
   159 000000C2                                 _asm_inthandler2c:
   160 000000C2 06                              	push 	es
   161 000000C3 1E                              	push 	ds
   162 000000C4 60                              	pushad
   163 000000C5 89 E0                           	mov		eax,esp
   164 000000C7 50                              	push	eax
   165 000000C8 66 8C D0                        	mov		ax,ss
   166 000000CB 8E D8                           	mov		ds,ax
   167 000000CD 8E C0                           	mov		es,ax
   168 000000CF E8 [00000000]                   	call	_inthandler2c
   169 000000D4 58                              	pop		eax
   170 000000D5 61                              	popad
   171 000000D6 1F                              	pop		ds
   172 000000D7 07                              	pop		es
   173 000000D8 CF                              	iretd
   174 000000D9                                 
   175 000000D9                                 _memtest_sub:	; unsigned int memtest_sub(unsigned int start, unsigned int end)
   176 000000D9 57                              	push 	edi
   177 000000DA 56                              	push	esi
   178 000000DB 53                              	push	ebx
   179 000000DC BE AA55AA55                     	mov		esi,0xaa55aa55
   180 000000E1 BF 55AA55AA                     	mov		edi,0x55aa55aa
   181 000000E6 8B 44 24 10                     	mov		eax,[esp+12+4]
   182 000000EA                                 mts_loop:
   183 000000EA 89 C3                           	mov		ebx,eax
   184 000000EC 81 C3 00000FFC                  	add		ebx,0xffc
   185 000000F2 8B 13                           	mov		edx,[ebx]
   186 000000F4 89 33                           	mov		[ebx],esi
   187 000000F6 83 33 FF                        	xor		dword [ebx], 0xffffffff
   188 000000F9 3B 33                           	cmp		esi,[ebx]
   189 000000FB 75 11                           	jne		mts_fin
   190 000000FD 89 13                           	mov		[ebx],edx
   191 000000FF 05 00001000                     	add		eax,0x1000
   192 00000104 3B 44 24 14                     	cmp		eax,[esp+12+8]
   193 00000108 76 E0                           	jbe		mts_loop
   194 0000010A 5B                              	pop		ebx
   195 0000010B 5E                              	pop		esi
   196 0000010C 5F                              	pop		edi
   197 0000010D C3                              	ret
   198 0000010E                                 mts_fin:
   199 0000010E 89 13                           	mov		[ebx],edx
   200 00000110 5B                              	pop		ebx
   201 00000111 5E                              	pop		esi
   202 00000112 5F                              	pop		edi
   203 00000113 C3                              	ret	
   204 00000114                                 
   205 00000114                                 _farjmp:	; void farjmp(int eip, int cs);
   206 00000114 FF 6C 24 04                     	jmp		far	[esp+4]
   207 00000118 C3                              	ret
